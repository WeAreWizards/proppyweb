"""Proppy models.

Revision ID: f22f3de9cd7d
Revises: None
Create Date: 2016-02-15 19:29:02.853287

"""

# revision identifiers, used by Alembic.
revision = 'f22f3de9cd7d'
down_revision = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('logo_url', sa.String(length=4096), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clients',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('contacts', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'company_id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', postgresql.BYTEA(length=255), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('activation_token', postgresql.BYTEA(), nullable=False),
    sa.Column('reset_password_token', postgresql.BYTEA(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('proposals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=True),
    sa.Column('share_uid', sa.String(length=10), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('changed_status_at', sa.DateTime(), nullable=False),
    sa.Column('status', sa.Enum('draft', 'sent', 'won', 'lost', 'trash', name='ProposalStatusEnum'), nullable=False),
    sa.Column('cover_image_url', sa.String(length=2048), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('share_uid')
    )
    op.create_table('blocks',
    sa.Column('uid', postgresql.UUID(), nullable=False),
    sa.Column('proposal_id', sa.Integer(), nullable=True),
    sa.Column('type', sa.Enum('section', 'paragraph', 'subtitle', 'uli', 'oli', 'image', 'cost_table', 'quote', 'embed', name='BlockTypeEnum'), nullable=False),
    sa.Column('data', postgresql.JSONB(), nullable=False),
    sa.Column('ordering', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['proposal_id'], ['proposals.id'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('proposal_last_seen',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('proposal_id', sa.Integer(), nullable=False),
    sa.Column('seen_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['proposal_id'], ['proposals.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'proposal_id')
    )
    op.create_table('shared_proposals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('proposal_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('cover_image_url', sa.String(length=2048), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('sent_to', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['proposal_id'], ['proposals.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('comment_threads',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('proposal_id', sa.Integer(), nullable=False),
    sa.Column('block_uid', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('resolved', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['block_uid'], ['blocks.uid'], ondelete='CASCADE', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['proposal_id'], ['proposals.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('import_section_search',
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('section_uid', postgresql.UUID(), nullable=False),
    sa.Column('proposal_title', sa.Unicode(), nullable=False),
    sa.Column('title', sa.Unicode(), nullable=False),
    sa.Column('ts_title', postgresql.TSVECTOR(), nullable=False),
    sa.Column('client', sa.Unicode(), nullable=False),
    sa.Column('all_content', sa.Unicode(), nullable=False),
    sa.Column('ts_all_content', postgresql.TSVECTOR(), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.ForeignKeyConstraint(['section_uid'], ['blocks.uid'], ondelete='CASCADE', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('section_uid')
    )
    op.create_table('shared_blocks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uid', postgresql.UUID(), nullable=False),
    sa.Column('shared_proposal_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('section', 'paragraph', 'subtitle', 'uli', 'oli', 'image', 'cost_table', 'quote', 'embed', name='BlockTypeEnum'), nullable=False),
    sa.Column('data', postgresql.JSONB(), nullable=False),
    sa.Column('ordering', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['shared_proposal_id'], ['shared_proposals.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('shared_proposal_id', 'uid')
    )
    op.create_table('comments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('thread_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('comment', sa.Unicode(), nullable=False),
    sa.ForeignKeyConstraint(['thread_id'], ['comment_threads.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('shared_comment_threads',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('shared_proposal_id', sa.Integer(), nullable=False),
    sa.Column('block_id', sa.Integer(), nullable=False),
    sa.Column('block_uid', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('resolved', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['shared_blocks.id'], ),
    sa.ForeignKeyConstraint(['shared_proposal_id'], ['shared_proposals.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('shared_comments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('from_client', sa.Boolean(), nullable=False),
    sa.Column('thread_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('comment', sa.Unicode(), nullable=False),
    sa.ForeignKeyConstraint(['thread_id'], ['shared_comment_threads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('shared_comments')
    op.drop_table('shared_comment_threads')
    op.drop_table('comments')
    op.drop_table('shared_blocks')
    op.drop_table('import_section_search')
    op.drop_table('comment_threads')
    op.drop_table('shared_proposals')
    op.drop_table('proposal_last_seen')
    op.drop_table('blocks')
    op.drop_table('proposals')
    op.drop_table('users')
    op.drop_table('clients')
    op.drop_table('companies')
    ### end Alembic commands ###
    connection = op.get_bind()
    connection.execute('DROP TYPE IF EXISTS "BlockTypeEnum"')
